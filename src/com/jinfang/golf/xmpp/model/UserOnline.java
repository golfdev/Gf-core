/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jinfang.golf.xmpp.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class UserOnline implements org.apache.thrift.TBase<UserOnline, UserOnline._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserOnline");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ONLINE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("onlineTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SERVER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("serverIp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserOnlineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserOnlineTupleSchemeFactory());
  }

  public int userId; // required
  public long onlineTime; // required
  public String serverIp; // required
  public int serverPort; // required
  public int status; // required
  public int appId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    ONLINE_TIME((short)2, "onlineTime"),
    SERVER_IP((short)3, "serverIp"),
    SERVER_PORT((short)4, "serverPort"),
    STATUS((short)5, "status"),
    APP_ID((short)6, "appId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // ONLINE_TIME
          return ONLINE_TIME;
        case 3: // SERVER_IP
          return SERVER_IP;
        case 4: // SERVER_PORT
          return SERVER_PORT;
        case 5: // STATUS
          return STATUS;
        case 6: // APP_ID
          return APP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __ONLINETIME_ISSET_ID = 1;
  private static final int __SERVERPORT_ISSET_ID = 2;
  private static final int __STATUS_ISSET_ID = 3;
  private static final int __APPID_ISSET_ID = 4;
  private BitSet __isset_bit_vector = new BitSet(5);
  private _Fields optionals[] = {_Fields.APP_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ONLINE_TIME, new org.apache.thrift.meta_data.FieldMetaData("onlineTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERVER_IP, new org.apache.thrift.meta_data.FieldMetaData("serverIp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserOnline.class, metaDataMap);
  }

  public UserOnline() {
    this.appId = 0;

  }

  public UserOnline(
    int userId,
    long onlineTime,
    String serverIp,
    int serverPort,
    int status)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.onlineTime = onlineTime;
    setOnlineTimeIsSet(true);
    this.serverIp = serverIp;
    this.serverPort = serverPort;
    setServerPortIsSet(true);
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserOnline(UserOnline other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    this.onlineTime = other.onlineTime;
    if (other.isSetServerIp()) {
      this.serverIp = other.serverIp;
    }
    this.serverPort = other.serverPort;
    this.status = other.status;
    this.appId = other.appId;
  }

  public UserOnline deepCopy() {
    return new UserOnline(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    setOnlineTimeIsSet(false);
    this.onlineTime = 0;
    this.serverIp = null;
    setServerPortIsSet(false);
    this.serverPort = 0;
    setStatusIsSet(false);
    this.status = 0;
    this.appId = 0;

  }

  public int getUserId() {
    return this.userId;
  }

  public UserOnline setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public long getOnlineTime() {
    return this.onlineTime;
  }

  public UserOnline setOnlineTime(long onlineTime) {
    this.onlineTime = onlineTime;
    setOnlineTimeIsSet(true);
    return this;
  }

  public void unsetOnlineTime() {
    __isset_bit_vector.clear(__ONLINETIME_ISSET_ID);
  }

  /** Returns true if field onlineTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOnlineTime() {
    return __isset_bit_vector.get(__ONLINETIME_ISSET_ID);
  }

  public void setOnlineTimeIsSet(boolean value) {
    __isset_bit_vector.set(__ONLINETIME_ISSET_ID, value);
  }

  public String getServerIp() {
    return this.serverIp;
  }

  public UserOnline setServerIp(String serverIp) {
    this.serverIp = serverIp;
    return this;
  }

  public void unsetServerIp() {
    this.serverIp = null;
  }

  /** Returns true if field serverIp is set (has been assigned a value) and false otherwise */
  public boolean isSetServerIp() {
    return this.serverIp != null;
  }

  public void setServerIpIsSet(boolean value) {
    if (!value) {
      this.serverIp = null;
    }
  }

  public int getServerPort() {
    return this.serverPort;
  }

  public UserOnline setServerPort(int serverPort) {
    this.serverPort = serverPort;
    setServerPortIsSet(true);
    return this;
  }

  public void unsetServerPort() {
    __isset_bit_vector.clear(__SERVERPORT_ISSET_ID);
  }

  /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
  public boolean isSetServerPort() {
    return __isset_bit_vector.get(__SERVERPORT_ISSET_ID);
  }

  public void setServerPortIsSet(boolean value) {
    __isset_bit_vector.set(__SERVERPORT_ISSET_ID, value);
  }

  public int getStatus() {
    return this.status;
  }

  public UserOnline setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bit_vector.clear(__STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return __isset_bit_vector.get(__STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bit_vector.set(__STATUS_ISSET_ID, value);
  }

  public int getAppId() {
    return this.appId;
  }

  public UserOnline setAppId(int appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bit_vector.clear(__APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return __isset_bit_vector.get(__APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bit_vector.set(__APPID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case ONLINE_TIME:
      if (value == null) {
        unsetOnlineTime();
      } else {
        setOnlineTime((Long)value);
      }
      break;

    case SERVER_IP:
      if (value == null) {
        unsetServerIp();
      } else {
        setServerIp((String)value);
      }
      break;

    case SERVER_PORT:
      if (value == null) {
        unsetServerPort();
      } else {
        setServerPort((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Integer.valueOf(getUserId());

    case ONLINE_TIME:
      return Long.valueOf(getOnlineTime());

    case SERVER_IP:
      return getServerIp();

    case SERVER_PORT:
      return Integer.valueOf(getServerPort());

    case STATUS:
      return Integer.valueOf(getStatus());

    case APP_ID:
      return Integer.valueOf(getAppId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case ONLINE_TIME:
      return isSetOnlineTime();
    case SERVER_IP:
      return isSetServerIp();
    case SERVER_PORT:
      return isSetServerPort();
    case STATUS:
      return isSetStatus();
    case APP_ID:
      return isSetAppId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UserOnline)
      return this.equals((UserOnline)that);
    return false;
  }

  public boolean equals(UserOnline that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_onlineTime = true;
    boolean that_present_onlineTime = true;
    if (this_present_onlineTime || that_present_onlineTime) {
      if (!(this_present_onlineTime && that_present_onlineTime))
        return false;
      if (this.onlineTime != that.onlineTime)
        return false;
    }

    boolean this_present_serverIp = true && this.isSetServerIp();
    boolean that_present_serverIp = true && that.isSetServerIp();
    if (this_present_serverIp || that_present_serverIp) {
      if (!(this_present_serverIp && that_present_serverIp))
        return false;
      if (!this.serverIp.equals(that.serverIp))
        return false;
    }

    boolean this_present_serverPort = true;
    boolean that_present_serverPort = true;
    if (this_present_serverPort || that_present_serverPort) {
      if (!(this_present_serverPort && that_present_serverPort))
        return false;
      if (this.serverPort != that.serverPort)
        return false;
    }

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(UserOnline other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    UserOnline typedOther = (UserOnline)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOnlineTime()).compareTo(typedOther.isSetOnlineTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnlineTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onlineTime, typedOther.onlineTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerIp()).compareTo(typedOther.isSetServerIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverIp, typedOther.serverIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerPort()).compareTo(typedOther.isSetServerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, typedOther.serverPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(typedOther.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, typedOther.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UserOnline(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onlineTime:");
    sb.append(this.onlineTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverIp:");
    if (this.serverIp == null) {
      sb.append("null");
    } else {
      sb.append(this.serverIp);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverPort:");
    sb.append(this.serverPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'userId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'onlineTime' because it's a primitive and you chose the non-beans generator.
    if (serverIp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverIp' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'serverPort' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'status' because it's a primitive and you chose the non-beans generator.
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserOnlineStandardSchemeFactory implements SchemeFactory {
    public UserOnlineStandardScheme getScheme() {
      return new UserOnlineStandardScheme();
    }
  }

  private static class UserOnlineStandardScheme extends StandardScheme<UserOnline> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserOnline struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ONLINE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.onlineTime = iprot.readI64();
              struct.setOnlineTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverIp = iprot.readString();
              struct.setServerIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERVER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serverPort = iprot.readI32();
              struct.setServerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appId = iprot.readI32();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetUserId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOnlineTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'onlineTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetServerPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverPort' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStatus()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserOnline struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ONLINE_TIME_FIELD_DESC);
      oprot.writeI64(struct.onlineTime);
      oprot.writeFieldEnd();
      if (struct.serverIp != null) {
        oprot.writeFieldBegin(SERVER_IP_FIELD_DESC);
        oprot.writeString(struct.serverIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
      oprot.writeI32(struct.serverPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI32(struct.appId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserOnlineTupleSchemeFactory implements SchemeFactory {
    public UserOnlineTupleScheme getScheme() {
      return new UserOnlineTupleScheme();
    }
  }

  private static class UserOnlineTupleScheme extends TupleScheme<UserOnline> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserOnline struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.userId);
      oprot.writeI64(struct.onlineTime);
      oprot.writeString(struct.serverIp);
      oprot.writeI32(struct.serverPort);
      oprot.writeI32(struct.status);
      BitSet optionals = new BitSet();
      if (struct.isSetAppId()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetAppId()) {
        oprot.writeI32(struct.appId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserOnline struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.userId = iprot.readI32();
      struct.setUserIdIsSet(true);
      struct.onlineTime = iprot.readI64();
      struct.setOnlineTimeIsSet(true);
      struct.serverIp = iprot.readString();
      struct.setServerIpIsSet(true);
      struct.serverPort = iprot.readI32();
      struct.setServerPortIsSet(true);
      struct.status = iprot.readI32();
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.appId = iprot.readI32();
        struct.setAppIdIsSet(true);
      }
    }
  }

}

